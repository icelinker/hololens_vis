<launch>

        <!-- requires the rosbridge package -->
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />

        <!-- nodes from this package -->
        <!-- the following node is the primary node for comms to HL, args are: Name of TF for wheelchair-->

        <!--node name="holoLink" pkg="hololens_vis" type="holoLink" args="/turtle1 /world" /-->
        <node name="holoLink" pkg="hololens_vis" type="holoLink" args="base_link map" />

        <!-- the following nodes pipe the images over a text topic, args are: image to read from, topic to publish to.-->
        <node name="image_to_text_coll" pkg="hololens_vis" type="imageToString" args="/formatted_grid/image /collisionVisText"/>
        <node name="image_to_text_joy" pkg="hololens_vis" type="imageToString" args="/joystickVis /joystickVisText"/>
        <node name="image_to_text_mirror" pkg="hololens_vis" type="imageToString" args="/rear_camera/image_raw /mirrorText"/>
        <node name="triangle_aligner" pkg="hololens_vis" type="pointWorldAlignment"/>
        <node name="timeKeeper" pkg="hololens_vis" type="timeSync" />
        <node  pkg="uvc_camera" type="uvc_camera_node" name="uvc_camera" output="screen">
         <param name="width" type="int" value="320" />
        <param name="device" type="string" value="/dev/video1"/>    
	<param name="height" type="int" value="240" />
        </node>


        <!-- nodes to help debugging (sans wheelchair), publish a float to errorMetric for blood splatter-->
        <!--node name="spoofImColl" pkg="hololens_vis" type="spoofImages" args="/collisionVis floor.png" />
        <node name="spoofImJoy" pkg="hololens_vis" type="spoofImages" args="/joystickVis arrows.png"/>
        <node name="spoofTF" pkg="hololens_vis" type="spoofTF" args="turtle1"/>
        <node name="turtles" pkg="turtlesim" type="turtlesim_node" />
        <node name="turtleController" pkg="turtlesim" type="turtle_teleop_key"/-->

</launch>
